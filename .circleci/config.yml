version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: php:7.1-apache
        environment:
          APP_ENV: test
    steps:
       - checkout
       - run:
          name: Install system packages
          command: apt-get update && apt-get -y install zip git zlib1g-dev wget
       - run:
          name: Install PHP extensions
          command: |
            docker-php-ext-install pdo
            docker-php-ext-install zip
       - run:
          name: Install Composer
          command: |
            apt-get update
            apt-get install -y curl nano
            curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
       - run:
          name: Display PHP information
          command: |
            php -v
            composer --version
       - run:
          name: Check PHP sintax
          command: find . -name \*.php -exec php -l "{}" \;
       - store_artifacts:
          path: /app
          destination: app-artifact
       - run:
          name: Install project dependencies
          command: |
            cd /app
            composer install
       - persist_to_workspace:
          root: /
          paths:
            - app
  test:
    working_directory: /
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /
      - run:
          name: Copy CI files to root
          command: |
             cd /app
             cp .circleci/data/Dockerfile .
             cp .circleci/data/wait-for-mysql.sh .
             cp .circleci/data/magento_module_install.sql .
             cp .circleci/data/brazilian_states.sql .
             cp .circleci/data/ciTestRunner.sh .
      - run:
          name: Build image base for modifications
          command: |
             cd /app
             docker build -t ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest .
             docker run --name newimage -d -p3306:3306 -p80:80 ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest
             docker cp /app/. newimage:app/.modman/magento
             docker exec -it newimage ls
      - run:
          name: Wait for MySQL Service
          command: |
            docker exec -it newimage sh /app/.modman/magento/wait-for-mysql.sh
            docker exec -it newimage rm /app/.modman/magento/wait-for-mysql.sh
      - run:
          name: Activate and setup Plugin
          command: |
            docker exec -it newimage /root/bin/modman repair --force
            docker exec -it newimage /bin/sh -c "ls"
            docker exec -it newimage php index.php
            docker exec -it newimage /bin/sh -c \
              "mysql magento < /app/.modman/magento/magento_module_install.sql"
            docker exec -it newimage /bin/sh -c \
                           "mysql magento < /app/.modman/magento/brazilian_states.sql"
            docker exec -it newimage mysql magento -e \
              "INSERT INTO magento.core_config_data (scope, scope_id, path, value) VALUES \
              ('default', 0, 'mundipagg_config/general_group/sk_test', '${API_TEST_SECRET_KEY}'), \
              ('default', 0, 'mundipagg_config/general_group/pk_test', '${API_TEST_PUBLIC_KEY}');"
            docker exec -it newimage /bin/sh -c \
              "mv /app/errors/local.xml.sample /app/errors/local.xml"
            docker exec -it newimage /bin/sh -c \
              "chown -R www-data:root /app/"
            docker exec -i newimage sh -c \
              "cd /app/.modman/magento && composer update --no-dev -vvv && /root/bin/modman repair --force"
      - run:
          name: Clear useless files
          command: |
             docker exec -i newimage sh -c \
               "cd /app/.modman/magento && \
               rm -rf .github .circleci .git .gitignore && \
               rm -rf Dockerfile wait-for-mysql.sh \
                 magento_module_install.sql brazilian_states.sql LICENSE *.MD"
      - run:
          name: Commit basic configs into Docker image
          command: |
           sleep 5 && docker stop newimage
           docker commit newimage ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest
           sleep 5 && docker start newimage
      - run:
          name: Install and run Functional Tests dependencies
          command: |
            docker exec -i newimage sh -c \
              "wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \
              echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | tee /etc/apt/sources.list.d/google-chrome.list && \
              apt-get -y update && apt-get -y install google-chrome-unstable"
            docker exec -i newimage sh -c \
              "cd /app/.modman/magento && \
              composer config --global github-oauth.github.com "${GITHUB_TOKEN}" && \
              composer update -vvv && /root/bin/modman repair --force"

      - run:
          name: Run Functional Tests
          command: |
            docker exec --detach newimage google-chrome-unstable --disable-gpu --no-sandbox --headless --remote-debugging-address=127.0.0.1 --remote-debugging-port=9222 --disable-extensions &
            docker exec -i newimage sh -c 'cd /app/.modman/magento && ./ciTestRunner.sh "lib/bin/behat"'

      - run:
          name: Reset image and set final configurations
          command: |
            sleep 5 && docker rm -f newimage
            docker run --name newimage -d -p3306:3306 -p80:80 ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest

      - run:
          name: Failure Handling - Retrieving log files
          command: |
            cd /
            mkdir failure_logs
            cd failure_logs
            mkdir magento
            mkdir apache
            docker cp newimage:/app/var/log/ ./magento
            docker cp newimage:/var/log/apache2/ ./apache
            docker cp newimage:/app/.modman/magento/failureScreenshots .
          when: on_fail

      - store_artifacts:
          path: /failure_logs

  publish:
    working_directory: /
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /
      - run:
          name: Copy CI files to root
          command: |
             cd /app
             cp .circleci/data/Dockerfile .
             cp .circleci/data/wait-for-mysql.sh .
             cp .circleci/data/magento_module_install.sql .
             cp .circleci/data/brazilian_states.sql .
      - run:
          name: Build image base for modifications
          command: |
             cd /app
             docker build -t ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest .
             docker run --name newimage -d -p3306:3306 -p80:80 ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest
             docker cp /app/. newimage:app/.modman/magento
             docker exec -it newimage ls
      - run:
          name: Wait for MySQL Service
          command: |
             docker exec -it newimage sh /app/.modman/magento/wait-for-mysql.sh
             docker exec -it newimage rm /app/.modman/magento/wait-for-mysql.sh
      - run:
          name: Activate and setup Plugin
          command: |
             docker exec -it newimage /root/bin/modman repair --force
             docker exec -it newimage /bin/sh -c "ls"
             docker exec -it newimage php index.php
             docker exec -it newimage /bin/sh -c \
               "mysql magento < /app/.modman/magento/magento_module_install.sql"
             docker exec -it newimage /bin/sh -c \
                            "mysql magento < /app/.modman/magento/brazilian_states.sql"
             docker exec -it newimage mysql magento -e \
               "INSERT INTO magento.core_config_data (scope, scope_id, path, value) VALUES \
               ('default', 0, 'mundipagg_config/general_group/sk_test', '${API_TEST_SECRET_KEY}'), \
               ('default', 0, 'mundipagg_config/general_group/pk_test', '${API_TEST_PUBLIC_KEY}');"
             docker exec -it newimage mysql magento -e \
               "UPDATE magento.core_config_data SET value = 'https://${STG_URL}/'\
                WHERE path IN ('web/unsecure/base_url','web/secure/base_url');"
             docker exec -it newimage /bin/sh -c \
               "mv /app/errors/local.xml.sample /app/errors/local.xml"
             docker exec -it newimage /bin/sh -c \
               "chown -R www-data:root /app/"
      - run:
          name: Clear useless files
          command: |
             docker exec -i newimage sh -c \
               "cd /app/.modman/magento && \
               rm -rf .github .circleci .git .gitignore && \
               rm -rf Dockerfile wait-for-mysql.sh \
               magento_module_install.sql brazilian_states.sql LICENSE *.MD"
      - deploy:
          name: Commit and push Docker image
          command: |
             sleep 5 && docker stop newimage
             docker login ${DOCKER_ACCOUNT} -u ${DOCKER_USER} -p ${DOCKER_PASS}
             docker commit newimage ${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest
             docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:latest"
             docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:${CIRCLE_BRANCH}"
             docker tag ${DOCKER_ACCOUNT}/${PROJECT_NAME} "${DOCKER_ACCOUNT}/${PROJECT_NAME}:${CIRCLE_SHA1:0:8}"
             docker push "${DOCKER_ACCOUNT}/${PROJECT_NAME}"
  deploy_staging:
     machine: true
     steps:
       - run:
           name: Send deployment webhook to Rancher
           command: |
             BODY='{"push_data":{"tag":"'"${CIRCLE_BRANCH}"'"},"repository":{"repo_name":"'"${DOCKER_ACCOUNT}/${PROJECT_NAME}"'"}}'
             curl -X POST ${RANCHER_STG_DEPLOY_URL} -H 'Content-Type: application/json' -d "${BODY}"

workflows:
  version: 2
  build_publish_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - publish:
          context: DockerRegistry
          requires:
            - test
          filters:
            branches:
              only: develop
      - deploy_staging:
          requires:
            - publish
          filters:
            branches:
              only: develop
